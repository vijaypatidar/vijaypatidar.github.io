"use strict";(self.webpackChunkmy_portfolio=self.webpackChunkmy_portfolio||[]).push([[7251],{2921:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var t=s(8327),i=s(4848),a=s(8453);const o={slug:"how-to-create-entity-classes-for-relational-tables",title:"How to Create Entity Classes for Relational Tables",authors:["vijay"],tags:["jpa","java"]},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"<strong>How to Create Entity Classes for Relational Tables</strong>",id:"how-to-create-entity-classes-for-relational-tables",level:2},{value:"<strong>Schema Overview</strong>",id:"schema-overview",level:2},{value:"<strong>Creating Entity Classes</strong>",id:"creating-entity-classes",level:2},{value:"<strong>Step 1: The <code>User</code> Entity</strong>",id:"step-1-the-user-entity",level:3},{value:"<strong>Step 2: The <code>Post</code> Entity</strong>",id:"step-2-the-post-entity",level:3},{value:"<strong>Step 3: The <code>Comment</code> Entity with a Composite Key</strong>",id:"step-3-the-comment-entity-with-a-composite-key",level:3},{value:"<strong>Composite Key Class (<code>CommentId</code>)</strong>",id:"composite-key-class-commentid",level:4},{value:"<strong>The <code>Comment</code> Entity</strong>",id:"the-comment-entity",level:4},{value:"<strong>Key Takeaways</strong>",id:"key-takeaways",level:2},{value:"<strong>Conclusion</strong>",id:"conclusion",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"how-to-create-entity-classes-for-relational-tables",children:(0,i.jsx)(n.strong,{children:"How to Create Entity Classes for Relational Tables"})}),"\n",(0,i.jsx)(n.p,{children:"When working with Java Persistence API (JPA), defining entity classes is a critical step to map relational database tables to Java objects. In this post, we\u2019ll explore how to create entity classes for a relational schema, focusing on best practices and solving common challenges such as composite keys."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"schema-overview",children:(0,i.jsx)(n.strong,{children:"Schema Overview"})}),"\n",(0,i.jsx)(n.p,{children:"Consider the following relational database schema:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Users"})," (",(0,i.jsx)(n.code,{children:"id"}),", ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"email"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Posts"})," (",(0,i.jsx)(n.code,{children:"id"}),", ",(0,i.jsx)(n.code,{children:"user_id"}),", ",(0,i.jsx)(n.code,{children:"title"}),", ",(0,i.jsx)(n.code,{children:"content"}),", ",(0,i.jsx)(n.code,{children:"date"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comments"})," (",(0,i.jsx)(n.code,{children:"post_id"}),", ",(0,i.jsx)(n.code,{children:"user_id"}),", ",(0,i.jsx)(n.code,{children:"comment"}),", ",(0,i.jsx)(n.code,{children:"date"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s what each table represents:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Users"}),": Stores user information."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Posts"}),": Represents content posted by users, linked to the ",(0,i.jsx)(n.code,{children:"users"})," table."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comments"}),": Stores user comments on posts, linked to both ",(0,i.jsx)(n.code,{children:"posts"})," and ",(0,i.jsx)(n.code,{children:"users"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"creating-entity-classes",children:(0,i.jsx)(n.strong,{children:"Creating Entity Classes"})}),"\n",(0,i.jsx)(n.h3,{id:"step-1-the-user-entity",children:(0,i.jsxs)(n.strong,{children:["Step 1: The ",(0,i.jsx)(n.code,{children:"User"})," Entity"]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"User"})," entity represents the ",(0,i.jsx)(n.code,{children:"users"})," table. It has a one-to-many relationship with both ",(0,i.jsx)(n.code,{children:"posts"})," and ",(0,i.jsx)(n.code,{children:"comments"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import jakarta.persistence.*;\nimport java.util.List;\n\n@Entity\n@Table(name = "users")\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n    private String email;\n\n    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)\n    private List<Post> posts;\n\n    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)\n    private List<Comment> comments;\n\n    // Getters and Setters\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-the-post-entity",children:(0,i.jsxs)(n.strong,{children:["Step 2: The ",(0,i.jsx)(n.code,{children:"Post"})," Entity"]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Post"})," entity maps the ",(0,i.jsx)(n.code,{children:"posts"})," table. It has a ",(0,i.jsx)(n.code,{children:"ManyToOne"})," relationship with ",(0,i.jsx)(n.code,{children:"User"})," and a ",(0,i.jsx)(n.code,{children:"OneToMany"})," relationship with ",(0,i.jsx)(n.code,{children:"Comment"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import jakarta.persistence.*;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Entity\n@Table(name = "posts")\npublic class Post {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = "user_id", nullable = false)\n    private User user;\n\n    private String title;\n    private String content;\n    private LocalDate date;\n\n    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, orphanRemoval = true)\n    private List<Comment> comments;\n\n    // Getters and Setters\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-the-comment-entity-with-a-composite-key",children:(0,i.jsxs)(n.strong,{children:["Step 3: The ",(0,i.jsx)(n.code,{children:"Comment"})," Entity with a Composite Key"]})}),"\n",(0,i.jsxs)(n.p,{children:["Unlike the ",(0,i.jsx)(n.code,{children:"User"})," and ",(0,i.jsx)(n.code,{children:"Post"})," entities, the ",(0,i.jsx)(n.code,{children:"Comment"})," entity uses a composite primary key (",(0,i.jsx)(n.code,{children:"post_id"}),", ",(0,i.jsx)(n.code,{children:"user_id"}),"). This eliminates the need for a separate ",(0,i.jsx)(n.code,{children:"id"})," field. Here\u2019s how to implement it:"]}),"\n",(0,i.jsx)(n.h4,{id:"composite-key-class-commentid",children:(0,i.jsxs)(n.strong,{children:["Composite Key Class (",(0,i.jsx)(n.code,{children:"CommentId"}),")"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import jakarta.persistence.Embeddable;\nimport java.io.Serializable;\nimport java.util.Objects;\n\n@Embeddable\npublic class CommentId implements Serializable {\n\n    private Long postId;\n\n    private Long userId;\n\n    // Default constructor\n    public CommentId() {}\n\n    public CommentId(Long postId, Long userId) {\n        this.postId = postId;\n        this.userId = userId;\n    }\n\n    // Getters and Setters\n    \n\n    // Override equals() and hashCode()\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        CommentId that = (CommentId) o;\n        return Objects.equals(postId, that.postId) &&\n               Objects.equals(userId, that.userId);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(postId, userId);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"the-comment-entity",children:(0,i.jsxs)(n.strong,{children:["The ",(0,i.jsx)(n.code,{children:"Comment"})," Entity"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import jakarta.persistence.*;\nimport java.time.LocalDate;\n\n@Entity\n@Table(name = "comments")\npublic class Comment {\n    @EmbeddedId\n    private CommentId id;\n\n    @ManyToOne\n    @MapsId("postId")\n    @JoinColumn(name = "post_id", nullable = false)\n    private Post post;\n\n    @ManyToOne\n    @MapsId("userId")\n    @JoinColumn(name = "user_id", nullable = false)\n    private User user;\n\n    private String comment;\n    private LocalDate date;\n\n    // Getters and Setters\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-takeaways",children:(0,i.jsx)(n.strong,{children:"Key Takeaways"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Relationships"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@ManyToOne"})," and ",(0,i.jsx)(n.code,{children:"@OneToMany"})," for parent-child relationships."]}),"\n",(0,i.jsx)(n.li,{children:"For bidirectional relationships, annotate the owning side."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Composite Keys"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Define a separate ",(0,i.jsx)(n.code,{children:"@Embeddable"})," class to represent composite keys."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@EmbeddedId"})," in the entity and ",(0,i.jsx)(n.code,{children:"@MapsId"})," to map foreign keys."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Database Integrity"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure relationships are managed correctly with cascading and orphan removal policies."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Best Practices"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Always override ",(0,i.jsx)(n.code,{children:"equals()"})," and ",(0,i.jsx)(n.code,{children:"hashCode()"})," in composite key classes."]}),"\n",(0,i.jsx)(n.li,{children:"Keep your entities simple and focused on mapping rather than business logic."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:(0,i.jsx)(n.strong,{children:"Conclusion"})}),"\n",(0,i.jsx)(n.p,{children:"By following these steps, you can create robust JPA entity classes tailored to your database schema. Whether you're using simple primary keys or composite keys, understanding JPA annotations and relationships is key to building scalable applications."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var t=s(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},8327:e=>{e.exports=JSON.parse('{"permalink":"/blog/how-to-create-entity-classes-for-relational-tables","editUrl":"https://github.com/vijaypatidar/my-portfolio/tree/main/blog/2024-12-07-how-to-create-entity-classes-for-relational-tables/index.md","source":"@site/blog/2024-12-07-how-to-create-entity-classes-for-relational-tables/index.md","title":"How to Create Entity Classes for Relational Tables","description":"How to Create Entity Classes for Relational Tables","date":"2024-12-07T00:00:00.000Z","tags":[{"inline":false,"label":"JPA","permalink":"/blog/tags/jpa","description":"Java Persistence API"},{"inline":false,"label":"Java","permalink":"/blog/tags/java","description":"Java"}],"readingTime":3.06,"hasTruncateMarker":true,"authors":[{"name":"Vijay Patidar","title":"Fullstack Software Engineer","url":"https://github.com/vijaypatidar","imageURL":"https://github.com/vijaypatidar.png","key":"vijay","page":null}],"frontMatter":{"slug":"how-to-create-entity-classes-for-relational-tables","title":"How to Create Entity Classes for Relational Tables","authors":["vijay"],"tags":["jpa","java"]},"unlisted":false,"prevItem":{"title":"Publish Android App Bundle to Play Store Using GitHub Actions","permalink":"/blog/publish-android-app-bundle-to-play-store-using-github-actions"},"nextItem":{"title":"What is Spring Boot Starter","permalink":"/blog/what-is-spring-boot-starters"}}')}}]);