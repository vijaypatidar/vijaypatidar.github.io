"use strict";(self.webpackChunkmy_portfolio=self.webpackChunkmy_portfolio||[]).push([[6286],{6143:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var t=a(9916),s=a(4848),r=a(8453);const i={slug:"what-is-stream-in-java",title:"What Is Stream In java",authors:["vijay"],tags:["java"]},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Key Characteristics of Streams",id:"key-characteristics-of-streams",level:2},{value:"Types of Stream Operations",id:"types-of-stream-operations",level:2},{value:"Creating Streams",id:"creating-streams",level:2},{value:"Common Stream Operations",id:"common-stream-operations",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"A sequence of elements in Java that supports several methods that can be pipelined to achieve a desired outcome is called a stream. Originally included in Java 8 as a component of the java.util.stream package, streams are a part of the Java Collections Framework. They are made to manipulate data declaratively, much like SQL does with information kept in tables."}),"\n",(0,s.jsx)(n.h2,{id:"key-characteristics-of-streams",children:"Key Characteristics of Streams"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sequence of Elements"}),": A stream provides a sequence of elements, where each element is processed one at a time."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Functional in Nature"}),": Operations on a stream are performed using a functional programming approach, allowing for concise and readable code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy Evaluation"}),": Stream operations are lazy; they are not executed until a terminal operation is invoked. This allows for optimization and efficient processing."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel Processing"}),": Streams can be easily parallelized, making it simple to perform operations on multiple elements concurrently."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"types-of-stream-operations",children:"Types of Stream Operations"}),"\n",(0,s.jsx)(n.p,{children:"There are two main types of stream operations: intermediate and terminal operations."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Intermediate Operations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"These operations return a new stream and are lazy, meaning they do not trigger any processing until a terminal operation is invoked."}),"\n",(0,s.jsxs)(n.li,{children:["Examples include ",(0,s.jsx)(n.code,{children:"filter()"}),", ",(0,s.jsx)(n.code,{children:"map()"}),", ",(0,s.jsx)(n.code,{children:"flatMap()"}),", ",(0,s.jsx)(n.code,{children:"distinct()"}),", ",(0,s.jsx)(n.code,{children:"sorted()"}),", and ",(0,s.jsx)(n.code,{children:"limit()"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Terminal Operations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"These operations trigger the actual processing of the stream and produce a result or a side-effect."}),"\n",(0,s.jsxs)(n.li,{children:["Examples include ",(0,s.jsx)(n.code,{children:"forEach()"}),", ",(0,s.jsx)(n.code,{children:"collect()"}),", ",(0,s.jsx)(n.code,{children:"reduce()"}),", ",(0,s.jsx)(n.code,{children:"count()"}),", ",(0,s.jsx)(n.code,{children:"findFirst()"}),", and ",(0,s.jsx)(n.code,{children:"allMatch()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-streams",children:"Creating Streams"}),"\n",(0,s.jsx)(n.p,{children:"Streams can be created from various data sources such as collections, arrays, and I/O channels. Here are some examples:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"From Collections"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<String> list = Arrays.asList("a", "b", "c");\nStream<String> stream = list.stream();\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"From Arrays"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'String[] array = {"a", "b", "c"};\nStream<String> stream = Arrays.stream(array);\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"From Lines of a File"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Stream<String> lines = Files.lines(Paths.get("file.txt"));\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"From Values"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Stream<String> stream = Stream.of("a", "b", "c");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-stream-operations",children:"Common Stream Operations"}),"\n",(0,s.jsx)(n.p,{children:"Here are some common operations performed on streams:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Filtering"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<String> filteredList = list.stream()\n                                .filter(s -> s.startsWith("a"))\n                                .collect(Collectors.toList());\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Mapping"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"List<Integer> lengths = list.stream()\n                            .map(String::length)\n                            .collect(Collectors.toList());\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Reducing"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Optional<String> concatenated = list.stream()\n                                    .reduce((s1, s2) -> s1 + s2);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Collecting"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"List<String> collected = list.stream()\n                             .sorted()\n                             .collect(Collectors.toList());\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parallel Streams"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<String> parallelList = list.parallelStream()\n                                .filter(s -> s.startsWith("a"))\n                                .collect(Collectors.toList());\n'})}),"\n",(0,s.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example that demonstrates the use of various stream operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StreamExample {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList("Ram", "Krishna", "Chanakya", "Patel", "Lakshman");\n\n        // Convert all names to uppercase and filter names that start with \'A\'\n        List<String> result = names.stream()\n                                   .map(String::toUpperCase)\n                                   .filter(name -> name.startsWith("R"))\n                                   .collect(Collectors.toList());\n\n        // Print the result\n        result.forEach(System.out::println);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"names"})," list is converted to a stream, each name is mapped to its uppercase form, filtered to retain names starting with ",(0,s.jsx)(n.code,{children:"R"}),", and then collected into a new list, which is printed to the console."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Streams in Java provide a powerful and flexible way to perform complex data processing tasks in a declarative and efficient manner. They enable functional-style operations on collections of elements, making it easier to write concise and readable code."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var t=a(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},9916:e=>{e.exports=JSON.parse('{"permalink":"/blog/what-is-stream-in-java","editUrl":"https://github.com/vijaypatidar/my-portfolio/tree/main/blog/2024-06-15-what-is-stream-in-java/index.md","source":"@site/blog/2024-06-15-what-is-stream-in-java/index.md","title":"What Is Stream In java","description":"Introduction","date":"2024-06-15T00:00:00.000Z","tags":[{"inline":false,"label":"Java","permalink":"/blog/tags/java","description":"Java"}],"readingTime":2.59,"hasTruncateMarker":true,"authors":[{"name":"Vijay Patidar","title":"Fullstack Software Engineer","url":"https://github.com/vijaypatidar","imageURL":"https://github.com/vijaypatidar.png","key":"vijay","page":null}],"frontMatter":{"slug":"what-is-stream-in-java","title":"What Is Stream In java","authors":["vijay"],"tags":["java"]},"unlisted":false,"prevItem":{"title":"Instrumenting Spring Boot Applications with OpenTelemetry (Without Java Agent)","permalink":"/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent"},"nextItem":{"title":"Build Docker Image Using Jib","permalink":"/blog/build-docker-image-using-jib"}}')}}]);