"use strict";(self.webpackChunkmy_portfolio=self.webpackChunkmy_portfolio||[]).push([[7237],{4790:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var a=r(5854),t=r(4848),i=r(8453);const s={title:"Setup ANTLR in Java Project and Write Grammar for Parsing Boolean Algebra Expressions",description:"Learn how to set up ANTLR in a Java project using Gradle and create a custom grammar to parse Boolean algebra expressions.",slug:"setup-antlr-java-boolean-grammar",authors:["vijay"],tags:["antlr","java"]},l=void 0,o={authorsImageUrls:[void 0]},d=[{value:"Step 1: Add ANTLR Plugin to <code>build.gradle</code>",id:"step-1-add-antlr-plugin-to-buildgradle",level:2},{value:"Step 2: Create ANTLR Grammar Directory",id:"step-2-create-antlr-grammar-directory",level:2},{value:"Step 3: Define the Boolean Algebra Grammar",id:"step-3-define-the-boolean-algebra-grammar",level:2},{value:"Step 4: Generate Parser and Lexer Code",id:"step-4-generate-parser-and-lexer-code",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"ANTLR (Another Tool for Language Recognition) is a powerful parser generator used for reading, processing, and executing or translating structured text or binary files. In this post, you'll learn how to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set up ANTLR in a Java project using Gradle."}),"\n",(0,t.jsx)(n.li,{children:"Write a grammar for parsing Boolean algebra expressions."}),"\n",(0,t.jsx)(n.li,{children:"Generate lexer and parser code using the Gradle plugin."}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"step-1-add-antlr-plugin-to-buildgradle",children:["Step 1: Add ANTLR Plugin to ",(0,t.jsx)(n.code,{children:"build.gradle"})]}),"\n",(0,t.jsx)(n.p,{children:"First, apply the ANTLR plugin and add required dependencies."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-groovy",children:'plugins {\n    id \'java\'\n    id \'antlr\'\n}\n\ngroup = \'com.vkpapps\'\nversion = \'1.0-SNAPSHOT\'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    antlr "org.antlr:antlr4:4.13.1"\n    implementation "org.antlr:antlr4-runtime:4.13.1"\n    // other dependencies\n}\n\ngenerateGrammarSource {\n    maxHeapSize = "64m"\n    arguments += ["-visitor", "-long-messages"]\n    outputDirectory = file("build/generated/antlr/main/com/vkpapps")\n}\n\nsourceSets {\n    main {\n        java {\n            srcDir "$buildDir/generated/antlr/main"\n        }\n        antlr {\n            srcDirs = [\'src/main/antlr\']\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This config tells Gradle to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use ANTLR for grammar processing."}),"\n",(0,t.jsx)(n.li,{children:"Output generated sources in a specific directory."}),"\n",(0,t.jsx)(n.li,{children:"Include those sources in the main source set."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-2-create-antlr-grammar-directory",children:"Step 2: Create ANTLR Grammar Directory"}),"\n",(0,t.jsxs)(n.p,{children:["Create a folder named ",(0,t.jsx)(n.code,{children:"antlr"})," under ",(0,t.jsx)(n.code,{children:"src/main"})," to store your grammar files:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"src/\n\u2514\u2500\u2500 main/\n    \u2514\u2500\u2500 antlr/\n        \u2514\u2500\u2500 BooleanAlgebra.g4\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-3-define-the-boolean-algebra-grammar",children:"Step 3: Define the Boolean Algebra Grammar"}),"\n",(0,t.jsxs)(n.p,{children:["Create a file named ",(0,t.jsx)(n.code,{children:"BooleanAlgebra.g4"})," and define your grammar:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-antlr",children:"grammar BooleanAlgebra;\n\n@header {\npackage com.vkpapps;\n}\n\nexpr\n    : expr (OPERATION expr)+\n    | '{' expr '}'\n    | '[' expr ']'\n    | '(' expr ')'\n    | VARIABLE\n    | (VARIABLE)? '(' expr ')' (VARIABLE)?\n    | WS\n    ;\n\nVARIABLE\n    : [a-z]+\n    | [a-z]+'\\'' (WS)*\n    | [0-1]\n    ;\n\nOPERATION\n    : OR\n    | PRODUCT\n    ;\n\nOR      : 'OR' | 'or' | '+' ;\nPRODUCT : '*' ;\n\nWS : [\\t\\r\\n]+ -> skip ;\n"})}),"\n",(0,t.jsx)(n.p,{children:"This grammar handles:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parentheses and brackets"}),"\n",(0,t.jsxs)(n.li,{children:["Single-letter variables (like ",(0,t.jsx)(n.code,{children:"a"}),", ",(0,t.jsx)(n.code,{children:"b'"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Basic operations (",(0,t.jsx)(n.code,{children:"+"}),", ",(0,t.jsx)(n.code,{children:"*"}),", ",(0,t.jsx)(n.code,{children:"OR"}),", etc.)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-4-generate-parser-and-lexer-code",children:"Step 4: Generate Parser and Lexer Code"}),"\n",(0,t.jsx)(n.p,{children:"Use the following Gradle command to generate the parser and lexer classes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./gradlew generateGrammarSource\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will generate Java classes for the lexer, parser, and visitor pattern under ",(0,t.jsx)(n.code,{children:"build/generated/antlr/main/com/vkpapps"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,t.jsx)(n.p,{children:"With the parser and lexer in place, you can now write a Java program to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parse Boolean expressions."}),"\n",(0,t.jsx)(n.li,{children:"Traverse the parse tree using the generated visitor classes."}),"\n",(0,t.jsx)(n.li,{children:"Evaluate or transform expressions for your specific use case (e.g., simplification, circuit generation, etc.)"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var a=r(6540);const t={},i=a.createContext(t);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:n},e.children)}},5854:e=>{e.exports=JSON.parse('{"permalink":"/blog/setup-antlr-java-boolean-grammar","editUrl":"https://github.com/vijaypatidar/my-portfolio/tree/main/blog/2025-05-14-setup-antlr-java-boolean-grammar/index.md","source":"@site/blog/2025-05-14-setup-antlr-java-boolean-grammar/index.md","title":"Setup ANTLR in Java Project and Write Grammar for Parsing Boolean Algebra Expressions","description":"Learn how to set up ANTLR in a Java project using Gradle and create a custom grammar to parse Boolean algebra expressions.","date":"2025-05-14T00:00:00.000Z","tags":[{"inline":true,"label":"antlr","permalink":"/blog/tags/antlr"},{"inline":false,"label":"Java","permalink":"/blog/tags/java","description":"Java"}],"readingTime":1.935,"hasTruncateMarker":true,"authors":[{"name":"Vijay Patidar","title":"Fullstack Software Engineer","url":"https://github.com/vijaypatidar","imageURL":"https://github.com/vijaypatidar.png","key":"vijay","page":null}],"frontMatter":{"title":"Setup ANTLR in Java Project and Write Grammar for Parsing Boolean Algebra Expressions","description":"Learn how to set up ANTLR in a Java project using Gradle and create a custom grammar to parse Boolean algebra expressions.","slug":"setup-antlr-java-boolean-grammar","authors":["vijay"],"tags":["antlr","java"]},"unlisted":false,"prevItem":{"title":"Create Beautiful Vertical Stepper in React Using MUI + TailwindCSS","permalink":"/blog/vertical-stepper-react-mui-tailwind"},"nextItem":{"title":"Setup flyway migration with spring boot","permalink":"/blog/2025-02-10-Setup-flyway-migration-with-spring-boot"}}')}}]);