<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Vijay Patidar Blog</title>
        <link>https://vijaypatidar.github.io/blog</link>
        <description>Vijay Patidar Blog</description>
        <lastBuildDate>Thu, 26 Sep 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[When to choose MySql vs PostgreSql relation databse]]></title>
            <link>https://vijaypatidar.github.io/blog/When-to-choose-MySql-vs-PostgreSql-relation-databse</link>
            <guid>https://vijaypatidar.github.io/blog/When-to-choose-MySql-vs-PostgreSql-relation-databse</guid>
            <pubDate>Thu, 26 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Choosing between MySQL and PostgreSQL depends on your project requirements, data complexity, and specific use cases. Here’s a breakdown of when to choose each:]]></description>
            <content:encoded><![CDATA[<p>Choosing between MySQL and PostgreSQL depends on your project requirements, data complexity, and specific use cases. Here’s a breakdown of when to choose each:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-choose-mysql"><strong>When to Choose MySQL</strong><a href="https://vijaypatidar.github.io/blog/When-to-choose-MySql-vs-PostgreSql-relation-databse#when-to-choose-mysql" class="hash-link" aria-label="Direct link to when-to-choose-mysql" title="Direct link to when-to-choose-mysql">​</a></h3>
<ol>
<li><strong>Simplicity and Ease of Use</strong>: Ideal for beginners or small applications where quick setup and ease of management are priorities.</li>
</ol>
<ol start="2">
<li>
<p><strong>Read-Heavy Workloads</strong>: Best suited for applications with high read-to-write ratios, such as content management systems or websites with static data.</p>
</li>
<li>
<p><strong>Speed</strong>: MySQL can outperform PostgreSQL in certain read-heavy scenarios due to its optimization for fast reads.</p>
</li>
<li>
<p><strong>Web Applications</strong>: Commonly used in web applications, especially with PHP and frameworks like WordPress.</p>
</li>
<li>
<p><strong>Replication Needs</strong>: Offers simpler replication features, making it a good choice for applications requiring master-slave replication.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-choose-postgresql"><strong>When to Choose PostgreSQL</strong><a href="https://vijaypatidar.github.io/blog/When-to-choose-MySql-vs-PostgreSql-relation-databse#when-to-choose-postgresql" class="hash-link" aria-label="Direct link to when-to-choose-postgresql" title="Direct link to when-to-choose-postgresql">​</a></h3>
<ol>
<li>
<p><strong>Complex Queries</strong>: Preferred for applications requiring complex queries, advanced data types, and powerful analytical capabilities.</p>
</li>
<li>
<p><strong>Data Integrity and Compliance</strong>: Stronger support for ACID compliance, making it suitable for applications that demand data integrity, such as financial systems.</p>
</li>
<li>
<p><strong>Advanced Features</strong>: Supports advanced features like full-text search, JSONB data type, and GIS capabilities (PostGIS).</p>
</li>
<li>
<p><strong>Concurrency</strong>: Better at handling concurrent transactions due to its MVCC (Multiversion Concurrency Control) architecture.</p>
</li>
<li>
<p><strong>Extensibility</strong>: Allows for custom data types, functions, and operators, making it highly customizable for specialized applications.</p>
</li>
<li>
<p><strong>Geospatial Data</strong>: Excellent choice if you need to handle geospatial data with complex queries.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="considerations-for-both"><strong>Considerations for Both</strong><a href="https://vijaypatidar.github.io/blog/When-to-choose-MySql-vs-PostgreSql-relation-databse#considerations-for-both" class="hash-link" aria-label="Direct link to considerations-for-both" title="Direct link to considerations-for-both">​</a></h3>
<ul>
<li><strong>Community and Support</strong>: Both databases have strong communities and plenty of resources available.</li>
<li><strong>Hosting</strong>: Check if your hosting provider supports the database of your choice and offers optimized configurations.</li>
<li><strong>Migration Plans</strong>: If you plan to scale your application, consider how easy it is to migrate from one database to another.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion"><strong>Conclusion</strong><a href="https://vijaypatidar.github.io/blog/When-to-choose-MySql-vs-PostgreSql-relation-databse#conclusion" class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion">​</a></h3>
<ul>
<li>Choose <strong>MySQL</strong> for simpler, read-heavy applications with less complexity.</li>
<li>Opt for <strong>PostgreSQL</strong> when you need advanced features, complex queries, and robust data integrity.</li>
</ul>
<p>Evaluate your specific use case and performance requirements to make the best choice!</p>]]></content:encoded>
            <category>Database</category>
        </item>
        <item>
            <title><![CDATA[Instrumenting Spring Boot Applications with OpenTelemetry (Without Java Agent)]]></title>
            <link>https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent</link>
            <guid>https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent</guid>
            <pubDate>Wed, 14 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="introduction"><strong>Introduction</strong><a href="https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent#introduction" class="hash-link" aria-label="Direct link to introduction" title="Direct link to introduction">​</a></h3>
<p>In modern distributed systems, observability is crucial for monitoring application performance and troubleshooting issues. OpenTelemetry (OTel) is a powerful tool for collecting telemetry data such as traces, metrics, and logs. In this guide, we'll walk through how to instrument a Spring Boot application with OpenTelemetry without using the Java agent, and how to export the telemetry data to Jaeger using Docker.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-setting-up-opentelemetry-in-spring-boot"><strong>Step 1: Setting Up OpenTelemetry in Spring Boot</strong><a href="https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent#step-1-setting-up-opentelemetry-in-spring-boot" class="hash-link" aria-label="Direct link to step-1-setting-up-opentelemetry-in-spring-boot" title="Direct link to step-1-setting-up-opentelemetry-in-spring-boot">​</a></h3>
<p>First, you'll need to add the necessary OpenTelemetry dependencies to your Spring Boot project. Here's how to do it with Gradle:</p>
<div class="language-groovy codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-groovy codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dependencies {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.6.0"))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>These dependencies bring in the OpenTelemetry SDK and the Spring Boot starter, which helps in auto-configuring the instrumentation of your application.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-configuring-opentelemetry-in-spring-boot"><strong>Step 2: Configuring OpenTelemetry in Spring Boot</strong><a href="https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent#step-2-configuring-opentelemetry-in-spring-boot" class="hash-link" aria-label="Direct link to step-2-configuring-opentelemetry-in-spring-boot" title="Direct link to step-2-configuring-opentelemetry-in-spring-boot">​</a></h3>
<p>Next, configure OpenTelemetry in your <code>application.yml</code> (or <code>application.properties</code>) to define how traces are exported and propagated:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">otel</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">traces</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">exporter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> otlp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">exporter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">otlp</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">endpoint</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> http</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//localhost</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">4317</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">protocol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> grpc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">propagators</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> tracecontext</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">resource</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">attributes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">deployment.environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">service</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> webflux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> spring</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here’s what each part does:</p>
<ul>
<li><strong>traces.exporter.otlp</strong>: Specifies the OTLP (OpenTelemetry Protocol) as the exporter.</li>
<li><strong>exporter.otlp.endpoint</strong>: The endpoint where the traces will be sent.</li>
<li><strong>propagators</strong>: Configures the trace context propagation.</li>
<li><strong>resource.attributes</strong>: Adds metadata like environment and service name to the traces.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-running-jaeger-with-docker-compose"><strong>Step 3: Running Jaeger with Docker Compose</strong><a href="https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent#step-3-running-jaeger-with-docker-compose" class="hash-link" aria-label="Direct link to step-3-running-jaeger-with-docker-compose" title="Direct link to step-3-running-jaeger-with-docker-compose">​</a></h3>
<p>To visualize the traces, you'll need a tool like Jaeger. Here’s a <code>docker-compose.yml</code> setup that runs Jaeger with Elasticsearch as the storage backend:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3.7"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">jaeger-collector</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jaegertracing/jaeger</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">collector</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1.40</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> COLLECTOR_OTLP_ENABLED=true </span><span class="token comment" style="color:#999988;font-style:italic"># Enable OTLP endpoint</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> SPAN_STORAGE_TYPE=elasticsearch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ES_SERVER_URLS=http</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//elasticsearch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">9200</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"14250:14250"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># OTLP gRPC</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"14268:14268"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># Jaeger HTTP Thrift</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"4317:4317"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># OTLP gRPC for traces</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"4318:4318"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># OTLP HTTP for traces</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">depends_on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> elasticsearch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> jaeger</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">jaeger-query</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jaegertracing/jaeger</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">query</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1.40</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> SPAN_STORAGE_TYPE=elasticsearch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ES_SERVER_URLS=http</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//elasticsearch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">9200</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"16686:16686"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># Jaeger UI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">depends_on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> jaeger</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">collector</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> jaeger</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">elasticsearch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker.elastic.co/elasticsearch/elasticsearch</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">7.10.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> discovery.type=single</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"9200:9200"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> jaeger</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">network</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">networks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">jaeger-network</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">driver</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bridge</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This setup creates three services:</p>
<ul>
<li><strong>Jaeger Collector</strong>: Collects traces from your application.</li>
<li><strong>Jaeger Query</strong>: Provides a UI to view and query traces.</li>
<li><strong>Elasticsearch</strong>: Stores the trace data.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-testing-the-setup"><strong>Step 4: Testing the Setup</strong><a href="https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent#step-4-testing-the-setup" class="hash-link" aria-label="Direct link to step-4-testing-the-setup" title="Direct link to step-4-testing-the-setup">​</a></h3>
<p>Once everything is configured, start your application and the Docker Compose setup. Generate some traffic in your application to produce traces. You should see the traces appear in the Jaeger UI at <code>http://localhost:16686</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion"><strong>Conclusion</strong><a href="https://vijaypatidar.github.io/blog/Instrumenting-Spring-Boot-Applications-with-OpenTelemetry-Without-Java-Agent#conclusion" class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion">​</a></h3>
<p>By following these steps, you've successfully instrumented your Spring Boot application with OpenTelemetry, configured it to export traces to Jaeger, and visualized the traces without using the OpenTelemetry Java agent. This approach offers flexibility and control over how your application is instrumented.</p>]]></content:encoded>
            <category>Java</category>
        </item>
        <item>
            <title><![CDATA[What Is Stream In java]]></title>
            <link>https://vijaypatidar.github.io/blog/what-is-stream-in-java</link>
            <guid>https://vijaypatidar.github.io/blog/what-is-stream-in-java</guid>
            <pubDate>Sat, 15 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>A sequence of elements in Java that supports several methods that can be pipelined to achieve a desired outcome is called a stream. Originally included in Java 8 as a component of the java.util.stream package, streams are a part of the Java Collections Framework. They are made to manipulate data declaratively, much like SQL does with information kept in tables.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="key-characteristics-of-streams">Key Characteristics of Streams<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#key-characteristics-of-streams" class="hash-link" aria-label="Direct link to Key Characteristics of Streams" title="Direct link to Key Characteristics of Streams">​</a></h2>
<ol>
<li><strong>Sequence of Elements</strong>: A stream provides a sequence of elements, where each element is processed one at a time.</li>
<li><strong>Functional in Nature</strong>: Operations on a stream are performed using a functional programming approach, allowing for concise and readable code.</li>
<li><strong>Lazy Evaluation</strong>: Stream operations are lazy; they are not executed until a terminal operation is invoked. This allows for optimization and efficient processing.</li>
<li><strong>Parallel Processing</strong>: Streams can be easily parallelized, making it simple to perform operations on multiple elements concurrently.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="types-of-stream-operations">Types of Stream Operations<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#types-of-stream-operations" class="hash-link" aria-label="Direct link to Types of Stream Operations" title="Direct link to Types of Stream Operations">​</a></h2>
<p>There are two main types of stream operations: intermediate and terminal operations.</p>
<p><strong>Intermediate Operations</strong>:</p>
<ul>
<li>These operations return a new stream and are lazy, meaning they do not trigger any processing until a terminal operation is invoked.</li>
<li>Examples include <code>filter()</code>, <code>map()</code>, <code>flatMap()</code>, <code>distinct()</code>, <code>sorted()</code>, and <code>limit()</code>.</li>
</ul>
<p><strong>Terminal Operations</strong>:</p>
<ul>
<li>These operations trigger the actual processing of the stream and produce a result or a side-effect.</li>
<li>Examples include <code>forEach()</code>, <code>collect()</code>, <code>reduce()</code>, <code>count()</code>, <code>findFirst()</code>, and <code>allMatch()</code>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-streams">Creating Streams<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#creating-streams" class="hash-link" aria-label="Direct link to Creating Streams" title="Direct link to Creating Streams">​</a></h2>
<p>Streams can be created from various data sources such as collections, arrays, and I/O channels. Here are some examples:</p>
<p><strong>From Collections</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;String&gt; list = Arrays.asList("a", "b", "c");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Stream&lt;String&gt; stream = list.stream();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>From Arrays</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">String[] array = {"a", "b", "c"};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Stream&lt;String&gt; stream = Arrays.stream(array);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>From Lines of a File</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stream&lt;String&gt; lines = Files.lines(Paths.get("file.txt"));</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>From Values</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Stream&lt;String&gt; stream = Stream.of("a", "b", "c");</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="common-stream-operations">Common Stream Operations<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#common-stream-operations" class="hash-link" aria-label="Direct link to Common Stream Operations" title="Direct link to Common Stream Operations">​</a></h2>
<p>Here are some common operations performed on streams:</p>
<p><strong>Filtering</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;String&gt; filteredList = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                .filter(s -&gt; s.startsWith("a"))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                .collect(Collectors.toList());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Mapping</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;Integer&gt; lengths = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            .map(String::length)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            .collect(Collectors.toList());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Reducing</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Optional&lt;String&gt; concatenated = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    .reduce((s1, s2) -&gt; s1 + s2);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Collecting</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;String&gt; collected = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             .sorted()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                             .collect(Collectors.toList());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Parallel Streams</strong>:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">List&lt;String&gt; parallelList = list.parallelStream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                .filter(s -&gt; s.startsWith("a"))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                .collect(Collectors.toList());</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="example-usage">Example Usage<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#example-usage" class="hash-link" aria-label="Direct link to Example Usage" title="Direct link to Example Usage">​</a></h2>
<p>Here's a complete example that demonstrates the use of various stream operations:</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.Arrays;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.List;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import java.util.stream.Collectors;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class StreamExample {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;String&gt; names = Arrays.asList("Ram", "Krishna", "Chanakya", "Patel", "Lakshman");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Convert all names to uppercase and filter names that start with 'A'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;String&gt; result = names.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   .map(String::toUpperCase)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   .filter(name -&gt; name.startsWith("R"))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   .collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Print the result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result.forEach(System.out::println);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, the <code>names</code> list is converted to a stream, each name is mapped to its uppercase form, filtered to retain names starting with <code>R</code>, and then collected into a new list, which is printed to the console.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://vijaypatidar.github.io/blog/what-is-stream-in-java#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Streams in Java provide a powerful and flexible way to perform complex data processing tasks in a declarative and efficient manner. They enable functional-style operations on collections of elements, making it easier to write concise and readable code.</p>]]></content:encoded>
            <category>Java</category>
        </item>
        <item>
            <title><![CDATA[Build Docker Image Using Jib]]></title>
            <link>https://vijaypatidar.github.io/blog/build-docker-image-using-jib</link>
            <guid>https://vijaypatidar.github.io/blog/build-docker-image-using-jib</guid>
            <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Docker Build]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="Docker Build" src="https://vijaypatidar.github.io/assets/images/docker-build-05d797831f0942b183f15ea01c423f40.png" width="1280" height="720" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://vijaypatidar.github.io/blog/build-docker-image-using-jib#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h2>
<p>This blog post introduces Jib, a powerful tool for building optimized Docker images for Java applications. Jib stands out by eliminating the need for a Docker daemon and expertise in Docker best practices, making it a convenient option for developers. Integrated as a plugin in Gradle or Maven projects, Jib simplifies the process of containerizing Java applications.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-jib">What is Jib?<a href="https://vijaypatidar.github.io/blog/build-docker-image-using-jib#what-is-jib" class="hash-link" aria-label="Direct link to What is Jib?" title="Direct link to What is Jib?">​</a></h2>
<p>Jib builds optimized Docker images for your Java applications without a Docker daemon or deep mastery of Docker best practices.
You can use it as a plugin in your Gradle or Maven project.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lets-configure-gradle-to-use-jib">Let's configure gradle to use Jib<a href="https://vijaypatidar.github.io/blog/build-docker-image-using-jib#lets-configure-gradle-to-use-jib" class="hash-link" aria-label="Direct link to Let's configure gradle to use Jib" title="Direct link to Let's configure gradle to use Jib">​</a></h2>
<p>Jib is used as a plugin, so we need to update the <code>build.gradle</code> file. We simply need to add the Jib plugin and define the Jib configuration block.</p>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">build.gradle</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">plugins {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    . . .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id 'com.google.cloud.tools.jib' version '3.1.1'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">. . .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jib {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    from {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        image = "amazoncorretto:11"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    to {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        image = "docker.io/vijaypatidar31/webflux"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        tags = ["latest", version]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    container {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mainClass = "com.vkpapps.demo.CoolSpringWebfluxApplication"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        jvmFlags = []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ports = ["443"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-and-publish-image-to-docker-registry">Build And Publish Image To Docker Registry<a href="https://vijaypatidar.github.io/blog/build-docker-image-using-jib#build-and-publish-image-to-docker-registry" class="hash-link" aria-label="Direct link to Build And Publish Image To Docker Registry" title="Direct link to Build And Publish Image To Docker Registry">​</a></h2>
<p>After configuring the jib block, you can run a gradle task to build and publish an image to the Docker registry (gradle jib).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="benefits">Benefits<a href="https://vijaypatidar.github.io/blog/build-docker-image-using-jib#benefits" class="hash-link" aria-label="Direct link to Benefits" title="Direct link to Benefits">​</a></h2>
<ul>
<li>Using Jib over a traditional Dockerfile for building and packaging Java applications offers several benefits:</li>
<li>Simplified Configuration: Integrates with Gradle/Maven, eliminating the need for a separate Dockerfile.</li>
<li>Faster Builds: Uses advanced caching mechanisms, reducing the need to rebuild unchanged layers.</li>
<li>Reproducible Builds: Ensures builds are reproducible by isolating the build environment from the runtime environment.</li>
<li>No Docker Daemon Required: Builds Docker images without requiring a Docker daemon, suitable for CI/CD pipelines or restricted environments.</li>
<li>Automatic Base Image Updates: This can automatically pull the latest base image, ensuring the use of up-to-date images with the latest security patches.</li>
<li>Layered Image Construction: Automatically separates the application into layers, optimizing the build and pushing process.</li>
<li>Integration with Container Registries: Seamlessly integrates with popular container registries, making it easy to push images directly from your build tool.</li>
<li>Advanced Configuration Options: Provides options for customizing the image build, such as specifying entry points, environment variables, JVM flags, and exposed ports.</li>
</ul>]]></content:encoded>
            <category>Java</category>
            <category>Spring</category>
        </item>
    </channel>
</rss>